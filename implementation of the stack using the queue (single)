the methods we are using  are from the in built queue library

Method	What It Does
put(x)	Enqueue item x
get()	Dequeue item from front
qsize()	Return number of items
empty()	Returns True if queue is empty
full()	Returns True if queue is full
maxsize	Maximum number of items allowed in queue
from queue import Queue
--------------
here  queue is a collection/libaray
and Queue is the class in the library of the queue
the library queue contains many classes they are 
Class	Behavior	Use Case
Queue	FIFO queue	Normal queue
LifoQueue	LIFO queue (stack)	Stack behavior
PriorityQueue	Priority-based	Process items based on priority
------------------------------------------------------------------------------
implementation of the stack using the single queue
from queue import Queue
class stack:
    def __init__(self):
        self.q=Queue()
    def push(self,x):
        s=self.q.qsize()
        self.q.put(x)
        for i in range(s):
            self.q.put(self.q.get())
    def pop(self):
        return self.q.get()
    def top(self):
        return self.q.queue[0]
    def len(self):
        return self.q.qsize()
s=stack()
s.push(1)
s.push(2)
s.push(3)
print(s.pop())
print(s.top())
print(s.len())
--------------------------------------------------------------------------
implementation of the stack using the two queues
